# This template will build and test your projects
# * Caches downloaded dependencies and plugins between invocation.
# * Verify but don't deploy merge requests.
# * Deploy built artifacts from master branch only.

stages:
  # - lint
  # - test
  - build
  - deploy

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
# cache:
#   paths:
#     - node_modules

# For merge requests do not `deploy` but only run `verify`.
# See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html
# lint:
#   stage: lint
#   script:
#     - yarn install
#     - yarn lint

# test:
#   stage: test
#   script:
#     - npm run test

# To deploy packages from CI, create a ci_settings.xml file
# For `master` branch run `mvn deploy` automatically.
build:
  only:
    - master
  stage: build
  before_script:
    - echo $CI_COMMIT_SHORT_SHA
    - yarn install
  script:
    - yarn build
    - docker build --file Dockerfile-production --tag $DOCKER_HUB_USERNAME/isec-frontend:$CI_COMMIT_SHORT_SHA .
    - echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin
    - docker push $DOCKER_HUB_USERNAME/isec-frontend:$CI_COMMIT_SHORT_SHA

deploy:
  only:
    - master
  stage: deploy
  before_script:
    - 'which ssh-agent || (sudo apt-get update -y && sudo apt-get install -y openssh-client)'
    - eval $(ssh-agent -s)
    - ssh-add <(echo $GIT_SSH_PRIV_KEY | base64 -d)
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - ssh $DEPLOYMENT_HOST "mkdir -p ~/isec-frontend"
    - scp docker-compose-production.yml $DEPLOYMENT_HOST:~/isec-frontend/docker-compose.yml
    - ssh $DEPLOYMENT_HOST "cd ~/isec-frontend && docker-compose down"
    - ssh $DEPLOYMENT_HOST "cd ~/isec-frontend && DOCKER_HUB_USERNAME=$DOCKER_HUB_USERNAME CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA docker-compose up -d"
    - ssh $DEPLOYMENT_HOST "docker container prune -f"
    - ssh $DEPLOYMENT_HOST "docker volume prune -f"
    - ssh $DEPLOYMENT_HOST 'DOCKER_HUB_USERNAME='"$DOCKER_HUB_USERNAME"'; for diru in $(docker images $DOCKER_HUB_USERNAME/isec-frontend --format "{{.Repository}}" | sort | uniq); do for dimr in $(docker images --format "{{.ID}};{{.Repository}}:{{.Tag}};{{.CreatedAt}}" --filter=reference="$diru:*" | sed -r "s/\s+/~/g" | tail -n+4); do img_tag=$(echo "$dimr" | cut -d";" -f2); docker rmi "$img_tag"; done done'